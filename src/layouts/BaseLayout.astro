---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

const { title, description } = Astro.props;

import "../styles/global.css";
import 'swiper/css';
import 'swiper/css/pagination';
import "swiper/css/navigation";
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <meta name="description" content={description} />


    <!-- ðŸ’¡  THEME SCRIPT â€” runs before first paint -->
<script is:inline>
(() => {
  const root   = document.documentElement;
  const mqDark = window.matchMedia('(prefers-color-scheme: dark)');
  
  const fire   = () => window.dispatchEvent(new Event('themechange'));

  // Apply a given mode ('light', 'dark', or 'system')
  function applyTheme(mode) {
    const isDark = mode === 'dark' || (mode === 'system' && mqDark.matches);
    root.classList.toggle('dark', isDark);
    fire();
  }

  // Expose the toggle helper for your ThemeToggle component
  window.setTheme = mode => {
    if (mode === 'system') {
      localStorage.removeItem('theme');
    } else {
      localStorage.setItem('theme', mode);
    }
    applyTheme(mode);
  };

  // If the OS theme flips and the user hasnâ€™t overridden, keep in sync
  mqDark.addEventListener('change', () => {
    if (!localStorage.getItem('theme')) {
      applyTheme('system');
    }
  });

  // On first paint, use stored preference or fall back to system
  const stored = localStorage.getItem('theme');
  applyTheme(stored || 'system');
})();
</script>



  </head>

  <body class="scroll-smooth">
    <Header />

    <!-- Page content injected here -->
    <slot />

    <Footer />

    <script is:inline>
      const io = new IntersectionObserver((entries, obs) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            /* Remove *all* translate classes you started with */
            entry.target.classList.remove(
              'opacity-0',
              'translate-y-6',
              '-translate-y-6',
              'translate-x-6',
              '-translate-x-6'
            );
            obs.unobserve(entry.target);   // reveal only once
          }
        });
      }, { rootMargin: '0px 0px -10%', threshold: 0.1 });

      document.querySelectorAll('[data-fade]').forEach(el => io.observe(el));
    </script>

    <script is:inline>
  document.querySelectorAll('figure[data-tilt]').forEach(fig => {
    const img = fig.querySelector('img');
    const range = 12;
    function handleMove(e) {
      const rect = fig.getBoundingClientRect();
      const x = e.clientX - rect.left  - rect.width/2;
      const y = e.clientY - rect.top   - rect.height/2;
      const rx = (-y/(rect.height/1.25))*range;
      const ry = ( x/(rect.width/1.25))*range;
      img.style.transform = `rotateX(${rx}deg) rotateY(${ry}deg) scale(1.05)`;
    }
    function reset() {
      img.style.transform = 'rotateX(0deg) rotateY(0deg) scale(1)';
    }
    fig.addEventListener('mousemove', handleMove);
    fig.addEventListener('mouseleave', reset);
  });
</script>

<script is:inline>
  document.querySelectorAll('[data-tilt]').forEach((container) => {
    const content = container.querySelector('.tilt-content');
    const range   = 4;  // max degrees of tilt; reduce for a subtler effect

    function handleMove(e) {
      const rect = container.getBoundingClientRect();
      const x    = (e.clientX - rect.left  - rect.width  / 2) / (rect.width  / 2);
      const y    = (e.clientY - rect.top   - rect.height / 2) / (rect.height / 2);
      content.style.transform = `
        rotateX(${(-y * range).toFixed(2)}deg)
        rotateY(${( x * range).toFixed(2)}deg)
      `;
    }

    function reset() {
      content.style.transform = 'rotateX(0) rotateY(0)';
    }

    container.addEventListener('mousemove', handleMove);
    container.addEventListener('mouseleave', reset);
  });
</script>


  </body>
</html>

